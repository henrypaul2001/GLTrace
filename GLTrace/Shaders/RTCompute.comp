#version 430 core
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D screenImage;

const uint max_world_size = 100;

struct ray {
	vec3 origin;
	vec3 direction;
};
ray new_ray(vec3 origin, vec3 direction) {
	ray r;
	r.origin = origin;
	r.direction = direction;
	return r;
}
vec3 at(ray r, float t) {
	return r.origin + t * r.direction;
}

struct sphere {
	vec3 center;
	float radius;
};
sphere new_sphere(vec3 position, float radius) {
	sphere s;
	s.center = position;
	s.radius = radius;
	return s;
}
bool hit_sphere(inout sphere s, inout ray r) {
	vec3 oc = s.center - r.origin;
	float a = dot(r.direction, r.direction);
	float b = -2.0 * dot(r.direction, oc);
	float c = dot(oc, oc) - s.radius * s.radius;
	float discriminant = b * b - 4 * a * c;
	
	return (discriminant >= 0);
}

sphere s;

struct camera {
	int image_width, image_height;  // Ratio of image width over height
	float aspect_ratio;				// Rendered image width in pixel count
	int samples_per_pixel;			// Number of random samples per pixel
	int max_bounces;				// Maximum times a ray can bounce off of geometry
	vec3 background_colour;			// Scene background colour

	float vfov;						// Vertical field of view
	vec3 lookfrom;					// Camera position
	vec3 lookat;					// Point camera is looking at
	vec3 vup;						// Camera relative up direction

	float defocus_angle;			// Variation angle of rays through each pixel
	float focus_dist;				// Distance from camera lookfrom point to plane of perfect focus

	float pixel_samples_scale;		// Colour scale factor for sum of pixel samples
	int sqrt_spp;					// Square root of number of samples per pixel
	float recip_sqrt_spp;			// 1 / sqrt_spp
	vec3 pixel00_loc;				// Location of pixel 0, 0
	vec3 pixel_delta_u;				// Offset to pixel to the right
	vec3 pixel_delta_v;				// Offset to pixel below
	vec3 u, v, w;					// Camera frame basis vectors
	vec3 defocus_disk_u;			// Defocus disk horizontal radius
	vec3 defocus_disk_v;			// Defocus disk vertical radius
};
uniform camera cam;
vec3 ray_colour(inout camera self, ray r) {
	if (hit_sphere(s, r)) {
		return vec3(1.0, 0.0, 0.0);
	}

	vec3 unit_direction = normalize(r.direction);
	float a = 0.5 * (unit_direction.y + 1.0);
	return (1.0 - a) * vec3(1.0) + a * vec3(0.5, 0.7, 1.0);
}

void main() {
	// Scene
	s = new_sphere(vec3(0.0, 0.0, -5.0), 2.5);
	
	camera Camera = cam;

	// Prepare trace
	vec3 pixel_colour = vec3(0.0);
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	uint j = pixel_coords.y;
	uint i = pixel_coords.x;
	vec3 pixel_center = cam.pixel00_loc + (i * cam.pixel_delta_u) + (j * cam.pixel_delta_v);
	vec3 ray_direction = pixel_center - cam.lookfrom;
	ray r = new_ray(cam.lookfrom, ray_direction);

	// Begin trace
	pixel_colour = ray_colour(Camera, r);

	// Output to image texture
	imageStore(screenImage, pixel_coords, vec4(pixel_colour, 1.0));
}