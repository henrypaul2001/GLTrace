#version 430 core
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2DArray screenBuffers;

uniform float time;
uniform int accumulation_frame_index = 1;
uint randseed;
const float pi = 3.1415926535897932385;
const uint max_world_size = 31;
const int max_textures = 30;
const uint UINT_MAX = uint(0xFFFFFFFFu);

uniform sampler2DArray material_textures[max_textures];

vec3 firstBounceDirection;
vec3 firstBounceNormal;

// Utility
// -------
float length_squared(vec3 vec) {
	return vec.x * vec.x + vec.y * vec.y + vec.z * vec.z;
}
uint PCH_Hash(uint seed) {
	uint state = seed * 747796405u + 2891336453u;
	uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
	return (word >> 22u) ^ word;
}
float rand() {
	randseed = PCH_Hash(randseed);
	return float(randseed) / float(UINT_MAX);
}
float rand(float fmin, float fmax) {
	return fmin + (fmax - fmin) * rand();
}
vec3 random_vector() {
	return vec3(rand(0.0, 1.0), rand(0.0, 1.0), rand(0.0, 1.0));
}
vec3 random_vector(float fmin, float fmax) {
	return vec3(rand(fmin, fmax), rand(fmin, fmax), rand(fmin, fmax));
}
vec3 random_unit_vector() {
	float theta = rand(0.0, 2.0 * pi);
	float phi = acos(rand(-1.0, 1.0));  // acos to sample evenly on a sphere
	float x = sin(phi) * cos(theta);
	float y = sin(phi) * sin(theta);
	float z = cos(phi);
	return vec3(x, y, z);
}
vec3 random_on_hemisphere(vec3 normal) {
	vec3 on_unit_sphere = random_unit_vector();
	if (dot(on_unit_sphere, normal) > 0.0) {
		return on_unit_sphere;
	}
	else {
		return -on_unit_sphere;
	}
}
vec3 random_in_unit_disk() {
// Generate a random angle theta and random radius squared (r^2) for uniform distribution
	float theta = rand(0.0, 2.0 * pi);
	float r = sqrt(rand(0.0, 1.0));  // sqrt ensures uniform sampling over the disk

	// Convert polar coordinates (r, theta) to Cartesian coordinates (x, y)
	float x = r * cos(theta);
	float y = r * sin(theta);

	// Return the point in the unit disk (z is always 0)
	return vec3(x, y, 0.0);
}
vec3 tangent_normal_to_local(vec3 tangent_normal, vec3 outward_normal) {
	//vec3 up = abs(dot(outward_normal, vec3(0.0, 1.0, 0.0))) > 0.99 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);
	vec3 up = abs(outward_normal.y) < 0.999 ? vec3(0.0, 1.0, 0.0) : vec3(0.0, 0.0, -1.0);
	vec3 tangent = normalize(cross(up, outward_normal));
	vec3 bitangent = normalize(cross(outward_normal, tangent));

	mat3 TBN = mat3(tangent, bitangent, outward_normal);

	vec3 local_normal = normalize(TBN * tangent_normal);

	return local_normal;
}
vec3 FresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
float Reflectance(float cosine, float refractive_index) {
    float r0 = (1.0 - refractive_index) / (1.0 + refractive_index);
    r0 = r0 * r0;
    return r0 + (1.0 - r0) * pow((1.0 - cosine), 5.0);
}

// BVH Structure
// -------------
struct BVHNode {
	vec4 aabbMin, aabbMax;
	uint leftChild; // rightChild == leftChild + 1
	uint firstQuadPrimitive, quadPrimitiveCount;
	uint firstSpherePrimitive, spherePrimitiveCount;
	uint padding1, padding2, padding3;
};

layout (std430, binding = 1) readonly buffer bvhBuffer {
	uint totalElements;
	uint nodesUsed;
	BVHNode[] bvhTree;
};
bool isLeafNode(in uint nodeID) {
	return (bvhTree[nodeID].quadPrimitiveCount + bvhTree[nodeID].spherePrimitiveCount > 0);
}

layout (std430, binding = 2) readonly buffer spherePrimitiveIDBuffer {
	uint[] sphereIDs;
};
layout (std430, binding = 3) readonly buffer quadPrimitiveIDBuffer {
	uint[] quadIDs;
};

// Material structures
// -------------------
struct material_set {
	int albedo_index;
	int normal_index;
	int roughness_index;
	int metal_index;
	int emission_index;
	int opacity_index;
};
material_set default_material_set() {
	material_set mat_set;
	mat_set.albedo_index = -1;
	mat_set.normal_index = -1;
	mat_set.roughness_index = -1;
	mat_set.metal_index = -1;
	mat_set.emission_index = -1;
	mat_set.opacity_index = -1;
	return mat_set;
};
struct material {
	vec3 albedo;
	float roughness;
	float metal;
	vec3 emissive_colour;
	float emissive_power;

	bool is_transparent;
	float refractive_index;

	int material_set_index;
	
	// Volumetric material
	bool is_constant_medium;
	float neg_inv_density;
};
material default_material() {
	material mat;
	mat.albedo = vec3(1.0);
	mat.roughness = 0.5;
	mat.metal = 0.0;
	mat.emissive_colour = vec3(0.0);
	mat.emissive_power = 0.0;
	mat.is_transparent = false;
	mat.refractive_index = 1.5;
	
	mat.material_set_index = -1;

	mat.is_constant_medium = false;
	mat.neg_inv_density = 0.0;
	return mat;
}
material volumetric_material(in float density, in vec3 colour) {
	material mat;
	mat.albedo = colour;
	mat.roughness = 0.0;
	mat.metal = 0.0;
	mat.emissive_colour = vec3(0.0);
	mat.emissive_power = 0.0;
	mat.is_transparent = false;
	mat.refractive_index = 1.5;
	
	mat.material_set_index = -1;

	mat.is_constant_medium = true;
	mat.neg_inv_density = (-1 / density);
	return mat;
};

// RT Utils
// --------
struct ray {
	vec3 origin;
	vec3 direction;
	vec3 rD; // direction reciprocals
};
ray new_ray(vec3 origin, vec3 direction) {
	ray r;
	r.origin = origin;
	r.direction = direction;
	r.rD = 1.0 / direction;
	return r;
}
vec3 at(ray r, float t) {
	return r.origin + (t * r.direction);
}

struct interval {
	float tmin;
	float tmax;
};
interval new_interval() {
	interval t;
	t.tmin = 0.0;
	t.tmax = 0.0;
	return t;
}
interval new_interval(float tmin, float tmax) {
	interval t;
	t.tmin = tmin;
	t.tmax = tmax;
	return t;
}
interval new_interval(interval a, interval b) {
	interval t;
	t.tmin = a.tmin <= b.tmin ? a.tmin : b.tmin;
	t.tmax = a.tmax >= b.tmax ? a.tmax : b.tmax;
	return t;
}
float size(interval self) {
	return self.tmax - self.tmin;
}
bool contains(interval self, float x) {
	return self.tmin <= x && x <= self.tmax;
}
bool surrounds(interval self, float x) {
	return self.tmin < x && x < self.tmax;
}

struct hit_record {
	vec3 p;
	vec3 normal;
	float t;
	float u;
	float v;
	bool front_face;
	uint material_index;
};
void set_face_normal(inout hit_record self, ray r, vec3 outward_normal) {
	self.front_face = dot(r.direction, outward_normal) < 0.0;
	self.normal = self.front_face ? outward_normal : -outward_normal;
}

// Hittables
// ---------
struct sphere {
	vec4 center;
	float radius;
	uint material_index;
	vec2 padding;
};
sphere new_sphere(vec3 position, float radius, uint material_index) {
	sphere s;
	s.center = vec4(position, 1.0);
	s.radius = radius;
	s.material_index = material_index;
	return s;
}
void get_sphere_uv(in vec3 p, inout float u, inout float v) {
	float theta = acos(-p.y);
	float phi = atan(-p.z, p.x) + pi;

	u = phi / (2.0 * pi);
	v = theta / pi;
}

struct quad {
	vec4 Q; // 16 bytes
	vec4 u, v; // 32 bytes
	vec4 w; // 16 bytes
	vec4 normal; // 16 bytes
	float D; // 4 bytes
	float area; // 4 bytes
	uint material_index; // 4 bytes

	uint triangle_disk_id; // 4 bytes
};
quad new_quad(in vec3 Q, in vec3 u, in vec3 v, in uint material_index) {
	quad newQuad;
	
	newQuad.Q.xyz = Q;
	newQuad.u.xyz = u;
	newQuad.v.xyz = v;
	//newQuad.is_triangle = false;
	//newQuad.is_disk = false;
	newQuad.material_index = material_index;

	vec3 n = cross(u, v);
	newQuad.normal.xyz = normalize(n);
	newQuad.D = dot(newQuad.normal.xyz, Q);
	newQuad.w.xyz = n / dot(n, n);
	newQuad.area = length(n);

	return newQuad;
}
quad new_triangle(in vec3 Q, in vec3 u, in vec3 v, in uint material_index) {
	quad newQuad;
	
	newQuad.Q.xyz = Q;
	newQuad.u.xyz = u;
	newQuad.v.xyz = v;
	//newQuad.is_triangle = true;
	//newQuad.is_disk = false;
	newQuad.material_index = material_index;

	vec3 n = cross(u, v);
	newQuad.normal.xyz = normalize(n);
	newQuad.D = dot(newQuad.normal.xyz, Q);
	newQuad.w.xyz = n / dot(n, n);
	newQuad.area = length(n);

	return newQuad;
}
quad new_disk(in vec3 Q, in vec3 u, in vec3 v, in uint material_index) {
	quad newQuad;
	
	newQuad.Q.xyz = Q;
	newQuad.u.xyz = u;
	newQuad.v.xyz = v;
	//newQuad.is_triangle = false;
	//newQuad.is_disk = true;
	newQuad.material_index = material_index;

	vec3 n = cross(u, v);
	newQuad.normal.xyz = normalize(n);
	newQuad.D = dot(newQuad.normal.xyz, Q);
	newQuad.w.xyz = n / dot(n, n);
	newQuad.area = length(n);

	return newQuad;
}
bool quad_is_interior(in float a, in float b, inout hit_record rec) {
	interval unit_interval = new_interval(0.0, 1.0);

	if (!contains(unit_interval, a) || !contains(unit_interval, b)) {
		return false;
	}

	rec.u = a;
	rec.v = b;
	return true;
}
bool triangle_is_interior(in float a, in float b, inout hit_record rec) {
	if (a > 0.0 && b > 0.0 && a + b < 1.0) {
		rec.u = a;
		rec.v = b;
		return true;
	}
	else {
		return false;
	}
}
bool disk_is_interior(in float a, in float b, inout hit_record rec) {
	if (sqrt(a * a + b * b) < 1.0) {
		rec.u = a / 2.0 + 0.5;
		rec.v = b / 2.0 + 0.5;
		return true;
	}
	else {
		return false;
	}
}

// Scene structure
// ---------------
const int max_spheres = 1000000;
const int max_quads = 1000000;
const int max_materials = 10;
uniform int num_materials;
uniform material materials[max_materials];
uniform material_set material_sets[max_materials];

layout (std430, binding = 4) readonly buffer sphereBuffer {
	uint num_spheres;
	sphere[] spheres;
};

layout (std430, binding = 5) readonly buffer quadBuffer {
	uint num_quads;
	quad[] quad_hittables;
};

// Ray intersections
// -----------------
bool hit_sphere(in uint sphere_index, in ray r, in interval ray_t, inout hit_record rec) {
	if (sphere_index < num_spheres) {
		vec3 Center = spheres[sphere_index].center.xyz;
		float Radius = spheres[sphere_index].radius;
		uint material_index = spheres[sphere_index].material_index;

		vec3 oc = Center - r.origin;

		float a = length_squared(r.direction);
		float h = dot(r.direction, oc);
		float c = length_squared(oc) - Radius * Radius;
		float discriminant = h * h - a * c;
	
		if (discriminant < 0) {
			return false;
		}

		float sqrtd = sqrt(discriminant);

		// Find nearest root that lies in acceptable range
		float root = (h - sqrtd) / a;
		if (!surrounds(ray_t, root)) {
			root = (h + sqrtd) / a;
			if (!surrounds(ray_t, root)) {
				return false;
			}
		}

		rec.t = root;
		rec.p = at(r, rec.t);
		vec3 outward_normal = (rec.p - Center) / Radius;
		set_face_normal(rec, r, outward_normal);
		get_sphere_uv(outward_normal, rec.u, rec.v);
		rec.material_index = material_index;

		// Check for normal map
		int mat_set_index = materials[material_index].material_set_index;
		if (mat_set_index > -1) {
			if (material_sets[mat_set_index].normal_index > -1) {
				vec3 tangent_normal = texture(material_textures[mat_set_index], vec3(rec.u, rec.v, material_sets[mat_set_index].normal_index)).xyz * 2.0 - 1.0;

				rec.normal = tangent_normal_to_local(tangent_normal, rec.normal);

				if (!rec.front_face) {
					rec.normal = -rec.normal;
				}
			}
		}
		return true;
	}
	// index out of bounds
	return false;
}
bool hit_sphere_volume(in uint sphere_index, in ray r, in interval ray_t, inout hit_record rec) {
	if (sphere_index < num_spheres) {
		hit_record rec1, rec2;

		uint material_index = spheres[sphere_index].material_index;
		float neg_inv_density = materials[material_index].neg_inv_density;

		if (!hit_sphere(sphere_index, r, new_interval(-1000000.0, 1000000.0), rec1)) {
			return false;
		}

		if (!hit_sphere(sphere_index, r, new_interval(rec1.t + 0.0001, 1000000.0), rec2)) {
			return false;
		}

		if (rec1.t < ray_t.tmin) { rec1.t = ray_t.tmin; }
		if (rec2.t > ray_t.tmax) { rec2.t = ray_t.tmax; }

		if (rec1.t >= rec2.t) { return false; }
		if (rec1.t < 0.0) { rec1.t = 0.0; }

		float ray_length = length(r.direction);
		float distance_inside_boundary = (rec2.t - rec1.t) * ray_length;
		float hit_distance = neg_inv_density * log(rand(0.0, 1.0));

		if (hit_distance > distance_inside_boundary) { return false; }

		rec.t = rec1.t + hit_distance / ray_length;
		rec.p = at(r, rec.t);

		rec.normal = vec3(1.0, 0.0, 0.0);
		rec.front_face = true;
		rec.material_index = material_index;

		return true;
	}
	// index out of bounds
	return false;
}
bool hit_sphere_list(ray r, in interval ray_t, inout hit_record rec, inout float closest_so_far) {
	hit_record temp_hit;
	bool hit_anything = false;

	for (int i = 0; i < num_spheres; i++) {
		if (materials[spheres[i].material_index].is_constant_medium) {
			if (hit_sphere_volume(i, r, new_interval(ray_t.tmin, closest_so_far), temp_hit)) {
				hit_anything = true;
				closest_so_far = temp_hit.t;
				rec = temp_hit;
			}
		}
		else {
			if (hit_sphere(i, r, new_interval(ray_t.tmin, closest_so_far), temp_hit)) {
				hit_anything = true;
				closest_so_far = temp_hit.t;
				rec = temp_hit;
			}
		}
	}

	return hit_anything;
}

bool hit_quad(in uint quad_index, in ray r, in interval ray_t, inout hit_record rec) {
	if (quad_index < num_quads) {
		vec3 Normal = quad_hittables[quad_index].normal.xyz;
		vec3 Q = quad_hittables[quad_index].Q.xyz;
		vec3 U = quad_hittables[quad_index].u.xyz;
		vec3 V = quad_hittables[quad_index].v.xyz;
		vec3 W = quad_hittables[quad_index].w.xyz;
		float D = quad_hittables[quad_index].D;
		uint material_index = quad_hittables[quad_index].material_index;
		bool is_triangle = (quad_hittables[quad_index].triangle_disk_id == 1u);
		bool is_disk = (quad_hittables[quad_index].triangle_disk_id == 2u);

		float denom = dot(Normal, r.direction);

		// Not hit if ray is parallel to plane
		if (abs(denom) < 1e-8) {
			return false;
		}

		// Interval check
		float t = (D - dot(Normal, r.origin)) / denom;
		if (!contains(ray_t, t)) {
			return false;
		}

		// Determine if hit point lies within planar shape using plane coordinates
		vec3 intersection = at(r, t);
		vec3 planar_hitpt_vector = intersection - Q;
		float alpha = dot(W, cross(planar_hitpt_vector, V));
		float beta = dot(W, cross(U, planar_hitpt_vector));

		if (!is_triangle && !is_disk && !quad_is_interior(alpha, beta, rec)) {
			return false;
		}
		else if (is_triangle && !triangle_is_interior(alpha, beta, rec)) {
			return false;
		}
		else if (is_disk && !disk_is_interior(alpha, beta, rec)) {
			return false;
		}

		rec.t = t;
		rec.p = intersection;
		rec.material_index = material_index;
		set_face_normal(rec, r, Normal);

		// Check for normal map
		int mat_set_index = materials[material_index].material_set_index;
		if (mat_set_index > -1) {
			if (material_sets[mat_set_index].normal_index > -1) {
				vec3 tangent_normal = texture(material_textures[mat_set_index], vec3(rec.u, rec.v, material_sets[mat_set_index].normal_index)).xyz * 2.0 - 1.0;

				rec.normal = tangent_normal_to_local(tangent_normal, rec.normal);

				if (!rec.front_face) {
					rec.normal = -rec.normal;
				}
			}
		}

		return true;
	}
	// index out of bounds
	return false;
}
bool hit_quad_list(in ray r, in interval ray_t, inout hit_record rec, inout float closest_so_far) {
	hit_record temp_hit;
	bool hit_anything = false;

	for (int i = 0; i < num_quads; i++) {
		if (hit_quad(i, r, new_interval(ray_t.tmin, closest_so_far), temp_hit)) {
			hit_anything = true;
			closest_so_far = temp_hit.t;
			rec = temp_hit;
		}
	}

	return hit_anything;
}

bool hit_aabb(in ray r, in interval t, in vec3 aabbMin, in vec3 aabbMax, inout float hit_distance) {
	float tx1 = (aabbMin.x - r.origin.x) * r.rD.x;
	float tx2 = (aabbMax.x - r.origin.x) * r.rD.x;
	float tmin = min(tx1, tx2);
	float tmax = max(tx1, tx2);

	float ty1 = (aabbMin.y - r.origin.y) * r.rD.y;
	float ty2 = (aabbMax.y - r.origin.y) * r.rD.y;
	tmin = max(tmin, min(ty1, ty2));
	tmax = min(tmax, max(ty1, ty2));

	float tz1 = (aabbMin.z - r.origin.z) * r.rD.z;
	float tz2 = (aabbMax.z - r.origin.z) * r.rD.z;
	tmin = max(tmin, min(tz1, tz2));
	tmax = min(tmax, max(tz1, tz2));

	bool hit = (tmax >= tmin && tmin < t.tmax && tmax >= t.tmin && tmax > 0);

	if (hit)	{ hit_distance = tmin; }
	else		{ hit_distance = 1e30f; }
	return hit;
}
bool hit_bvh_primitives(in uint nodeID, in ray r, in interval ray_t, inout hit_record rec, inout float closest_so_far) {
	bool hit_anything = false;
	uint firstSphereIndex = bvhTree[nodeID].firstSpherePrimitive;
	uint firstQuadIndex = bvhTree[nodeID].firstQuadPrimitive;
	uint totalQuads = bvhTree[nodeID].quadPrimitiveCount;
	uint totalSpheres = bvhTree[nodeID].spherePrimitiveCount;

	hit_record temp_hit;

	// Test spheres
	for (int i = 0; i < totalSpheres; i++) {
		uint sphereID = sphereIDs[firstSphereIndex + i];
		if (materials[spheres[sphereID].material_index].is_constant_medium) {
			if (hit_sphere_volume(sphereID, r, new_interval(ray_t.tmin, closest_so_far), temp_hit)) {
				hit_anything = true;
				closest_so_far = temp_hit.t;
				rec = temp_hit;
			}
		}
		else {
			if (hit_sphere(sphereID, r, new_interval(ray_t.tmin, closest_so_far), temp_hit)) {
				hit_anything = true;
				closest_so_far = temp_hit.t;
				rec = temp_hit;
			}
		}
	}

	// Test quads
	for (int i = 0; i < totalQuads; i++) {
		uint quadID = quadIDs[firstQuadIndex + i];
		if (hit_quad(quadID, r, new_interval(ray_t.tmin, closest_so_far), temp_hit)) {
			hit_anything = true;
			closest_so_far = temp_hit.t;
			rec = temp_hit;
		}
	}

	return hit_anything;
}

// Camera structure
// ----------------
struct camera {
	int image_width, image_height;  // Ratio of image width over height
	float aspect_ratio;				// Rendered image width in pixel count
	int samples_per_pixel;			// Number of random samples per pixel
	int max_bounces;				// Maximum times a ray can bounce off of geometry

	vec3 sky_colour_min_y;			// Sky colour when ray hits background at y = 0
	vec3 sky_colour_max_y;			// Sky colour when ray hits background at y = 1

	float vfov;						// Vertical field of view
	vec3 lookfrom;					// Camera position
	vec3 lookat;					// Point camera is looking at
	vec3 vup;						// Camera relative up direction

	float defocus_angle;			// Variation angle of rays through each pixel
	float focus_dist;				// Distance from camera lookfrom point to plane of perfect focus

	float pixel_samples_scale;		// Colour scale factor for sum of pixel samples
	int sqrt_spp;					// Square root of number of samples per pixel
	float recip_sqrt_spp;			// 1 / sqrt_spp
	vec3 pixel00_loc;				// Location of pixel 0, 0
	vec3 pixel_delta_u;				// Offset to pixel to the right
	vec3 pixel_delta_v;				// Offset to pixel below
	vec3 u, v, w;					// Camera frame basis vectors
	vec3 defocus_disk_u;			// Defocus disk horizontal radius
	vec3 defocus_disk_v;			// Defocus disk vertical radius
};
uniform camera cam;
vec3 ray_colour(inout camera self, ray r) {
	hit_record rec;
	float closest_so_far = 1000000.0;
	if (hit_sphere_list(r, new_interval(0.001, 1000000.0), rec, closest_so_far)) {
		vec3 direction = random_on_hemisphere(rec.normal);
		return materials[rec.material_index].albedo * ray_colour(self, new_ray(rec.p, direction));
	}

	vec3 unit_direction = normalize(r.direction);
	float a = 0.5 * (unit_direction.y + 1.0);
	return (1.0 - a) * vec3(1.0) + a * vec3(0.5, 0.7, 1.0);
}
vec3 sample_square_stratified(int s_i, int s_j, float recip_sqrt_spp) {
		// Returns vector to random point in square sub-pixel specified by grid indices s_i, s_j
		float px = ((s_i + rand(0.0, 1.0)) * recip_sqrt_spp) - 0.5;
		float py = ((s_j + rand(0.0, 1.0)) * recip_sqrt_spp) - 0.5;

		return vec3(px, py, 0.0);
}
vec3 defocus_disk_sample(inout camera self) {
	// Returns random point in camera focus disk
	vec3 p = random_in_unit_disk();
	return self.lookfrom + (p.x * self.defocus_disk_u) + (p.y * self.defocus_disk_v);
}
ray get_ray(inout camera self, int i, int j, int s_i, int s_j) {
	// Construct ray originating from defocus disk and directed and randomly sampled point around pixel location i, j for stratified sample square s_i, s_j
	vec3 offset = sample_square_stratified(s_i, s_j, self.recip_sqrt_spp);
	vec3 pixel_sample = self.pixel00_loc
			+ ((i + offset.x) * self.pixel_delta_u)
			+ ((j + offset.y) * self.pixel_delta_v);
	
	vec3 ray_origin = (self.defocus_angle <= 0.0) ? self.lookfrom : defocus_disk_sample(self);
	vec3 ray_direction = pixel_sample - ray_origin;

	return new_ray(ray_origin, ray_direction);
}

// Ray tracing loop
// ----------------
bool TraverseBVHLoop(in ray r, in interval ray_t, inout hit_record rec, inout float closest_so_far) {
	bool hit_anything = false;
	uint nodeID = 0;
	uint stackIDs[32];
	uint stackPTR = 0;

	while (true) {
		if (isLeafNode(nodeID)) {
			// Test primitives
			hit_anything = hit_bvh_primitives(nodeID, r, ray_t, rec, closest_so_far) || hit_anything;

			// Pop stack
			if (stackPTR == 0) { return hit_anything; }
			else {
				nodeID = stackIDs[--stackPTR];
			}
			continue;
		}

		// Test child nodes
		uint childID1 = bvhTree[nodeID].leftChild;
		uint childID2 = childID1 + 1;
		float dist1;
		float dist2;

		interval ray_interval = new_interval(ray_t.tmin, closest_so_far);
		bool hit1 = hit_aabb(r, ray_interval, bvhTree[childID1].aabbMin.xyz, bvhTree[childID1].aabbMax.xyz, dist1);
		bool hit2 = hit_aabb(r, ray_interval, bvhTree[childID2].aabbMin.xyz, bvhTree[childID2].aabbMax.xyz, dist2);

		// Get closest hit
		if (hit1 && hit2 && dist1 > dist2) {
			float temp = dist1;
			dist1 = dist2;
			dist2 = temp;

			uint tempChild = childID1;
			childID1 = childID2;
			childID2 = tempChild;
		}
		
		if (hit1) {
			// Set current node to hit1 node, add hit2 to stack for later testing
			nodeID = childID1;
			if (hit2 && stackPTR < 31) {
				stackIDs[stackPTR++] = childID2;
			}
		}
		else if (hit2) {
			// Process right child
			nodeID = childID2;
		}
		else {
			// Pop stack
			if (stackPTR == 0) { return hit_anything; }
			else { 
				stackPTR -= 1;
				nodeID = stackIDs[stackPTR];
			}
		}
	}
	return false;
}

ray bounce_ray(in ray current_ray, in vec3 hit_normal, in vec3 hit_point, in bool front_face, in float roughness, in float metal, in bool is_transparent, in float refractive_index, in bool is_constant_medium, in float neg_inv_density) {
	metal = clamp(metal, 0.0, 1.0);
	roughness = clamp(roughness, 0.0, 1.0);
	vec3 direction;

	if (!is_constant_medium) {
		vec3 unit_in_direction = normalize(current_ray.direction);
		vec3 reflected = normalize(reflect(unit_in_direction, hit_normal));
		vec3 specular_direction = reflected + (roughness * random_vector(-0.5, 0.5));
		vec3 diffuse_direction = random_on_hemisphere(hit_normal);

		// Blend specular (metal) direction with diffuse direction based on material metalness
		vec3 diffuse_to_specular = specular_direction - diffuse_direction;
		//direction = diffuse_direction + (diffuse_to_specular * metal);
		direction = specular_direction;

		// Trasparency
		if (is_transparent) {
			float ri = front_face ? (1.0 / refractive_index) : refractive_index;
			float cos_theta = min(dot(-unit_in_direction, hit_normal), 1.0);
			float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

			bool cannot_refract = ri * sin_theta > 1.0;

			if (!cannot_refract && Reflectance(cos_theta, ri) < rand()) {
				direction = refract(unit_in_direction, hit_normal, ri);
			}
		}
	}
	else {
		direction = random_unit_vector();
	}
	return new_ray(hit_point, normalize(direction));
}
void get_material_properties(in uint material_index, inout vec3 colour_from_material, inout float metal, inout float roughness, inout bool is_transparent, inout float refractive_index, inout vec3 colour_from_emission, vec2 uv, inout bool is_constant_medium, inout float neg_inv_density) {
	int mat_set_index = materials[material_index].material_set_index;
	if (mat_set_index == -1) {
		colour_from_material = materials[material_index].albedo;
		is_transparent = materials[material_index].is_transparent;
		metal = materials[material_index].metal;
		roughness = materials[material_index].roughness;
		colour_from_emission = materials[material_index].emissive_colour * materials[material_index].emissive_power;
	}
	else {
		// Get albedo
		if (material_sets[mat_set_index].albedo_index == -1) {
			colour_from_material = materials[material_index].albedo;
		}
		else {
			colour_from_material = texture(material_textures[mat_set_index], vec3(uv, material_sets[mat_set_index].albedo_index)).rgb;
		}

		// Get transparency
		if (material_sets[mat_set_index].opacity_index == -1) {
			is_transparent = materials[material_index].is_transparent;
		}
		else {
			is_transparent = (texture(material_textures[mat_set_index], vec3(uv, material_sets[mat_set_index].opacity_index)).a < 1.0);
		}

		// Get metalness
		if (material_sets[mat_set_index].metal_index == -1) {
			metal = materials[material_index].metal;
		}
		else {
			metal = texture(material_textures[mat_set_index], vec3(uv, material_sets[mat_set_index].metal_index)).r;
		}

		// Get roughness
		if (material_sets[mat_set_index].roughness_index == -1) {
			roughness = materials[material_index].roughness;
		}
		else {
			roughness = texture(material_textures[mat_set_index], vec3(uv, material_sets[mat_set_index].roughness_index)).r;
		}

		// Get emission
		if (material_sets[mat_set_index].emission_index == -1) {
			colour_from_emission = materials[material_index].emissive_colour * materials[material_index].emissive_power;
		}
		else {
			colour_from_emission = texture(material_textures[mat_set_index], vec3(uv, material_sets[mat_set_index].emission_index)).rgb * materials[material_index].emissive_power;
		}
	}
	
	refractive_index = materials[material_index].refractive_index;
	is_constant_medium = materials[material_index].is_constant_medium;
	neg_inv_density = materials[material_index].neg_inv_density;
	metal = clamp(metal, 0.0, 1.0);
	roughness = clamp(roughness, 0.0, 1.0);
}
vec3 ray_colour_iterative(in camera self, ray r) {
	ray current_ray = r;
	vec3 current_attenuation = vec3(1.0);

	for (int i = 0; i < self.max_bounces; i++) {
		hit_record rec;
		bool hit_anything = false;
		float closest_so_far = 1000000.0;
		//if (hit_sphere_list(current_ray, new_interval(0.001, 1000000.0), rec, closest_so_far)) { hit_anything = true; }
		//if (hit_quad_list(current_ray, new_interval(0.001, 1000000.0), rec, closest_so_far)) { hit_anything = true; }
		if (TraverseBVHLoop(current_ray, new_interval(0.001, 1000000.0), rec, closest_so_far)) { hit_anything = true; }

		if (hit_anything) {
			uint material_index = rec.material_index;
			vec3 colour_from_emission;
			vec3 material_colour;
			float metal, roughness, refractive_index, neg_inv_density;
			bool is_transparent, is_constant_medium;

			get_material_properties(material_index, material_colour, metal, roughness, is_transparent, refractive_index, colour_from_emission, vec2(rec.u, rec.v), is_constant_medium, neg_inv_density);

			//material_colour *= metal;
			//material_colour *= (1.0 - metal);
			//vec3 metal_material_colour = material_colour * (1.0 - metal);
			//material_colour = mix(material_colour, metal_material_colour, metal);

			if (colour_from_emission.x > 0.0 || colour_from_emission.y > 0.0 || colour_from_emission.z > 0.0) {
				return current_attenuation * (colour_from_emission + material_colour);
			}

			current_ray = bounce_ray(current_ray, rec.normal, rec.p, rec.front_face, roughness, metal, is_transparent, refractive_index, is_constant_medium, neg_inv_density);

			if (i == 0) { firstBounceDirection = current_ray.direction; firstBounceNormal = rec.normal; }

			current_attenuation *= material_colour;
			//current_attenuation += current_attenuation * material_colour;
		}
		else {
			if (i == 0) { firstBounceDirection = vec3(0.0); firstBounceNormal = vec3(0.0); }

			vec3 unit_direction = normalize(r.direction);
			float a = 0.5 * (unit_direction.y + 1.0);
			vec3 sky_colour = (1.0 - a) * self.sky_colour_min_y + a * self.sky_colour_max_y;
			return current_attenuation * sky_colour;
		}

	}

	return vec3(0.0);
}

void main() {
	camera Camera = cam;

	// Prepare trace
	vec3 pixel_colour = vec3(0.0);
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	int j = pixel_coords.y;
	int i = pixel_coords.x;
	randseed = PCH_Hash((i + j * 65536u + gl_GlobalInvocationID.z * 65536u * 65536u) * uint(time * 1000.0));

	// Begin trace
	for (int s_j = 0; s_j < Camera.sqrt_spp; s_j++) {
		for (int s_i = 0; s_i < Camera.sqrt_spp; s_i++) {
			ray r = get_ray(Camera, i, j, s_i, s_j);
			pixel_colour += ray_colour_iterative(Camera, r);
		}
	}
	pixel_colour = Camera.pixel_samples_scale * pixel_colour;

	// Accumulation
	vec3 current_accumulation = vec3(0.0);
	if (accumulation_frame_index > 1) { current_accumulation = imageLoad(screenBuffers, ivec3(pixel_coords, 3)).xyz; }
	vec3 accumulated_colour = current_accumulation + pixel_colour;

	// Output to image textures
	imageStore(screenBuffers, ivec3(pixel_coords, 0), vec4(accumulated_colour / accumulation_frame_index, 1.0));
	imageStore(screenBuffers, ivec3(pixel_coords, 1), vec4(firstBounceDirection, 1.0));
	imageStore(screenBuffers, ivec3(pixel_coords, 2), vec4(firstBounceNormal, 1.0));
	imageStore(screenBuffers, ivec3(pixel_coords, 3), vec4(accumulated_colour, 1.0));
}